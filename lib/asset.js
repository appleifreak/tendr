// Generated by CoffeeScript 1.3.3
(function() {
  var Asset, AssetReference, Manager, crypto, mime, path, utils, uuid, _;

  _ = require('underscore');

  utils = require('./utility');

  path = require('path');

  mime = require('mime');

  Manager = require('./manager');

  uuid = require('node-uuid');

  crypto = require('crypto');

  Asset = (function() {

    function Asset(name, options) {
      var ext, _ref;
      this.name = name;
      this.options = utils.opts(options);
      this.type = "text";
      this.content = new Buffer(1);
      this.uuid = uuid.v4();
      this._manager = null;
      this._storage = null;
      this._refs = {};
      ext = path.extname(this.name);
      this.mime = (_ref = mime.lookup(ext)) != null ? _ref : null;
      utils.log("Asset `" + this.name + "` created.");
    }

    Asset.prototype.write = function(content, offset, length, encoding) {
      var nb, total, _ref;
      if (_.isString(offset) && !encoding) {
        _ref = [offset, 0], encoding = _ref[0], offset = _ref[1];
      }
      if (offset == null) {
        offset = 0;
      }
      if (length == null) {
        length = _.isString(content) ? Buffer.byteLength(content, encoding) : content.length;
      }
      total = length + offset;
      nb = new Buffer(total);
      this.content.copy(nb);
      if (_.isString(content)) {
        nb.write(content, offset, length, encoding);
      } else if (Buffer.isBuffer(content)) {
        content.copy(nb, offset, 0, length);
      }
      this.content = nb;
      return utils.log("" + length + " bytes written to Asset `" + this.name + "`.");
    };

    Asset.prototype.append = function(content) {
      return this.write(content, this.size());
    };

    Asset.prototype.size = function() {
      return this.content.length;
    };

    Asset.prototype.toHash = function(hash, encoding) {
      if (hash == null) {
        hash = "md5";
      }
      if (encoding == null) {
        encoding = "hex";
      }
      return crypto.createHash(hash).update(this.toBuffer()).digest(encoding);
    };

    Asset.prototype.toString = function() {
      return this.content.toString.apply(this.content, arguments);
    };

    Asset.prototype.toBuffer = function() {
      var nb;
      nb = new Buffer(this.size());
      this.content.copy(nb);
      return nb;
    };

    Asset.prototype.compile = function() {
      return this.toString();
    };

    Asset.prototype.clone = function() {
      var asset, obj;
      utils.log("Cloning Asset `" + this.name + "`...");
      obj = this.toObject("content", "name", "options");
      asset = new this.constructor(this.name, this.options);
      asset.write(this.content);
      _.each(obj, function(v, k) {
        return asset[k] = v;
      });
      return asset;
    };

    Asset.prototype.toObject = function() {
      var omit;
      omit = _.flatten(["_manager", "uuid", _.functions(this), _.toArray(arguments)]);
      return _.chain(this).omit(omit).pairs().map(function(p) {
        if (Buffer.isBuffer(p[1])) {
          p[1] = p[1].toString('base64');
        }
        return p;
      }).object().value();
    };

    Asset.prototype.toReference = function() {
      var ref;
      ref = new AssetReference(this._refs, this._storage);
      ref._manager = this._manager;
      if (this.url) {
        ref.url = this.url;
      }
      return ref;
    };

    Asset.prototype.has_manager = function() {
      var _ref;
      return (_ref = this._manager) != null ? _ref : {
        "true": false
      };
    };

    Asset.prototype.use_storage = function(stor_name) {
      if (!this.has_manager()) {
        throw new Error("No manager is associated with this Asset.");
      }
      if (!this._manager.get_storage(stor_name)) {
        throw new Error("Storage `" + stor_name + "` has not been registered.");
      }
      return this._storage = stor_name;
    };

    Asset.prototype.clear_reference = function(stor_name) {
      if (stor_name == null) {
        return this._refs = {};
      } else if (_.has(this._refs, stor_name)) {
        return delete this._refs[stor_name];
      }
    };

    Asset.prototype.save = function(stor_name, cb) {
      var ref, storage, _ref, _ref1,
        _this = this;
      if (!this.has_manager()) {
        return cb(new Error("No manager is associated with this Asset."));
      }
      if (_.isFunction(stor_name)) {
        _ref = [stor_name, null], cb = _ref[0], stor_name = _ref[1];
      }
      if (stor_name == null) {
        stor_name = this._storage;
      }
      if (!stor_name) {
        return cb(new Error("Storage Engine is not specified."));
      }
      storage = this._manager.get_storage(stor_name);
      ref = (_ref1 = this._refs[stor_name]) != null ? _ref1 : null;
      if (ref) {
        return storage.update(ref, this, cb);
      } else {
        return storage.insert(this, function(err, ref) {
          if (err) {
            return cb(err);
          } else {
            _this._refs[stor_name] = ref;
            return cb(null);
          }
        });
      }
    };

    return Asset;

  })();

  module.exports.Asset = Asset;

  AssetReference = (function() {

    function AssetReference(_refs, _storage) {
      this._refs = _refs;
      this._storage = _storage;
      this._manager = null;
      this.uuid = uuid.v4();
      this.url = null;
    }

    AssetReference.prototype.has_manager = function() {
      var _ref;
      return (_ref = this._manager) != null ? _ref : {
        "true": false
      };
    };

    AssetReference.prototype.toObject = function() {
      return {
        _refs: this._refs,
        _storage: this._storage,
        url: this.url
      };
    };

    AssetReference.prototype.toAsset = function(stor_name, cb) {
      var ref, storage, _ref, _ref1;
      if (!this.has_manager()) {
        throw new Error("No manager is associated with this AssetReference.");
      }
      if (_.isFunction(stor_name)) {
        _ref = [stor_name, null], cb = _ref[0], stor_name = _ref[1];
      }
      if (stor_name == null) {
        stor_name = this._storage;
      }
      if (!stor_name) {
        return cb(new Error("Storage Engine is not specified."));
      }
      storage = this._manager.get_storage(stor_name);
      ref = (_ref1 = this._refs[stor_name]) != null ? _ref1 : null;
      if (!ref) {
        return cb(new Error("No internal reference found for an asset in `" + stor_name + "` Storage."));
      }
      return storage.find(ref, cb);
    };

    return AssetReference;

  })();

  module.exports.AssetReference = AssetReference;

}).call(this);
