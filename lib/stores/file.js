// Generated by CoffeeScript 1.3.3
(function() {
  var Asset, AssetReference, FileStorage, SimpleCache, Storage, alib, fs, md5_cache, path, utils, uuid, _,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  _ = require('underscore');

  utils = require('../utility');

  alib = require('../asset');

  uuid = require('node-uuid');

  fs = require('fs');

  path = require('path');

  Storage = require('../storage');

  Asset = alib.Asset;

  AssetReference = alib.AssetReference;

  SimpleCache = utils.SimpleCache;

  md5_cache = new SimpleCache();

  FileStorage = (function(_super) {

    __extends(FileStorage, _super);

    function FileStorage(options) {
      this.options = utils.opts(options, {
        dest: null,
        use_names: false
      });
      if (!(fs.existsSync(this.options.dest) && fs.statSync(this.options.dest).isDirectory())) {
        throw new Error("Need a save destination for this FileStorage.");
      }
      this.name = 'filesystem';
      this.manager = null;
    }

    FileStorage.prototype.insert = function(asset, cb) {
      var _this = this;
      uuid = uuid.v4();
      return this.write_asset(uuid, asset, function(err) {
        if (err) {
          return cb(err);
        } else {
          utils.log("Storage `" + _this.name + "` inserted new Asset `" + asset.name + "` with ref `" + uuid + "`.");
          return cb(null, uuid);
        }
      });
    };

    FileStorage.prototype.find = function(ref, cb) {
      var _this = this;
      return this.file_to_asset(ref, function(err, asset) {
        if (err) {
          return cb(err);
        } else {
          asset._manager = _this.manager;
          asset._storage = _this.name;
          asset._refs[_this.name] = ref;
          return cb(null, asset);
        }
      });
    };

    FileStorage.prototype.update = function(ref, asset, cb) {
      var _this = this;
      return this.exists(ref, function(exists) {
        if (!exists) {
          return cb(new Error("`" + ref + "` couldn't be found."));
        }
        return _this.write_asset(ref, asset, function(err) {
          if (err) {
            return cb(err);
          } else {
            utils.log("Storage `" + _this.name + "` updated Asset `" + asset.name + "` with ref `" + uuid + "`.");
            return cb(null);
          }
        });
      });
    };

    FileStorage.prototype.remove = function(ref, cb) {
      var _this = this;
      cb = _.once(this.default_cb(cb));
      return this.exists(ref, function(exists) {
        if (!exists) {
          return cb(new Error("`" + ref + "` couldn't be found."));
        }
        return fs.unlink(_this.path_composer(ref), function(err) {
          if (err) {
            cb(err);
          }
          _this.find_kill_md5(ref);
          utils.log("Storage `" + _this.name + "` removed Asset with ref `" + uuid + "`.");
          return cb();
        });
      });
    };

    FileStorage.prototype.exists = function(ref, cb) {
      var file;
      cb = this.default_cb(cb);
      file = this.path_composer(ref);
      return fs.exists(file, function(exists) {
        if (!exists) {
          return cb(false);
        } else {
          return fs.stat(file, function(err, stats) {
            return cb(stats.isFile());
          });
        }
      });
    };

    FileStorage.prototype.has = function(asset, cb) {
      var md5;
      cb = this.default_cb(cb);
      md5 = asset.toHash("md5", "hex");
      if (md5_cache.has(md5)) {
        return cb(null, md5_cache.get(md5));
      } else {
        return cb(null, null);
      }
    };

    FileStorage.prototype.path_composer = function(p) {
      return path.resolve(this.options.dest, p);
    };

    FileStorage.prototype.file_to_asset = function(p, cb) {
      var data, file, stream;
      cb = _.once(this.default_cb(cb));
      file = this.path_composer(p);
      stream = fs.createReadStream(file, {
        flags: 'r',
        encoding: "utf8"
      });
      data = "";
      stream.on("data", function(d) {
        return data += d;
      });
      stream.on("error", function(err) {
        return cb(err);
      });
      return stream.on("end", function() {
        var asset;
        try {
          data = JSON.parse(data);
          asset = new Asset(data.name);
          _.each(data, function(item, key) {
            if (key === "content") {
              return asset.write(item, "base64");
            } else {
              return asset[key] = item;
            }
          });
          return cb(null, asset);
        } catch (e) {
          return cb(e);
        }
      });
    };

    FileStorage.prototype.write_asset = function(ref, asset, cb) {
      var data, md5, stream,
        _this = this;
      cb = _.once(this.default_cb(cb));
      if (!(asset instanceof Asset)) {
        return cb(new Error("Expecting an asset."));
      }
      data = asset.toObject();
      md5 = asset.toHash("md5", "hex");
      stream = fs.createWriteStream(this.path_composer(ref), {
        flags: 'w'
      });
      stream.on("error", function(err) {
        return cb(err);
      });
      stream.on("close", function() {
        return cb(null);
      });
      return stream.on("open", function() {
        stream.write(JSON.stringify(data), "utf8");
        _this.find_kill_md5(ref);
        md5_cache.set(md5, ref);
        return stream.end();
      });
    };

    FileStorage.prototype.find_kill_md5 = function(ref) {
      var i, k;
      if (k = md5_cache.find(ref)) {
        i = _.indexOf(md5_cache.all(k), ref);
        if (i > -1) {
          md5_cache.remove(k, i);
          return true;
        }
      }
      return false;
    };

    FileStorage.prototype.default_cb = function(cb) {
      if (_.isFunction(cb)) {
        return cb;
      } else {
        return function(err) {
          if (err) {
            throw err;
          }
        };
      }
    };

    return FileStorage;

  })(Storage);

  module.exports = FileStorage;

}).call(this);
