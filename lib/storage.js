// Generated by CoffeeScript 1.3.3
(function() {
  var Asset, AssetReference, SimpleCache, Storage, alib, assets, md5_cache, utils, uuid, _;

  _ = require('underscore');

  utils = require('./utility');

  alib = require('./asset');

  uuid = require('node-uuid');

  Asset = alib.Asset;

  AssetReference = alib.AssetReference;

  SimpleCache = utils.SimpleCache;

  assets = new SimpleCache({
    unique: true
  });

  md5_cache = new SimpleCache();

  Storage = (function() {

    function Storage(options) {
      this.options = utils.opts(options);
      this.name = 'memory';
      this.manager = null;
    }

    Storage.prototype.insert = function(asset, cb) {
      var md5;
      cb = this.default_cb(cb);
      if (!(asset instanceof Asset)) {
        return cb(new Error("Expecting an asset."));
      }
      asset = asset.clone();
      md5 = utils.md5(asset.toBuffer());
      uuid = uuid.v4();
      assets.set(uuid, asset);
      md5_cache.set(md5, uuid);
      utils.log("Storage `" + this.name + "` inserted new Asset `" + asset.name + "` with ref `" + uuid + "`.");
      return cb(null, uuid);
    };

    Storage.prototype.find = function(ref, cb) {
      var asset;
      cb = this.default_cb(cb);
      if (!assets.has(ref)) {
        return cb(null, null);
      } else {
        asset = assets.get(ref);
        asset._manager = this.manager;
        asset._storage = this.name;
        asset._refs[this.name] = ref;
        return cb(null, asset);
      }
    };

    Storage.prototype.update = function(ref, asset, cb) {
      var i, k, md5;
      cb = this.default_cb(cb);
      if (!(asset instanceof Asset)) {
        return cb(new Error("Expecting an asset."));
      }
      if (!assets.has(ref)) {
        return cb(new Error("`" + ref + "` couldn't be found."));
      }
      asset = asset.clone();
      md5 = utils.md5(asset.toBuffer());
      k = md5_cache.find(ref);
      i = _.indexOf(md5_cache.all(k), ref);
      if (i > -1) {
        md5_cache.remove(k, i);
      }
      assets.set(ref, asset);
      md5_cache.set(md5, ref);
      utils.log("Storage `" + this.name + "` updated Asset `" + asset.name + "` with ref `" + uuid + "`.");
      return cb();
    };

    Storage.prototype.remove = function(ref, cb) {
      var i, k;
      cb = this.default_cb(cb);
      if (!assets.has(ref)) {
        return cb(new Error("`" + ref + "` couldn't be found."));
      }
      assets.remove(ref);
      k = md5_cache.find(ref);
      i = _.indexOf(md5_cache.all(k), ref);
      if (i > -1) {
        md5_cache.remove(k, i);
      }
      utils.log("Storage `" + this.name + "` removed Asset with ref `" + uuid + "`.");
      return cb();
    };

    Storage.prototype.exists = function(ref, cb) {
      return cb(assets.has(ref));
    };

    Storage.prototype.has = function(asset, cb) {
      var md5;
      cb = this.default_cb(cb);
      md5 = utils.md5(asset.toBuffer());
      if (md5_cache.has(md5)) {
        return cb(null, md5_cache.get(md5));
      } else {
        return cb(null, null);
      }
    };

    Storage.prototype.default_cb = function(cb) {
      if (_.isFunction(cb)) {
        return cb;
      } else {
        return function(err) {
          if (err) {
            throw err;
          }
        };
      }
    };

    return Storage;

  })();

  module.exports = Storage;

}).call(this);
